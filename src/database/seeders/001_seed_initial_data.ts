import { Pool } from 'mysql2/promise';
import bcrypt from 'bcryptjs';

export const seed = async (pool: Pool): Promise<void> => {
  const connection = await pool.getConnection();

  try {
    console.log('üå± Starting database seeding...');

    // 1. Seed admin user
    const hashedPassword = await bcrypt.hash('admin123', 10);
    await connection.execute(`
      INSERT INTO users (email, password, full_name, phone, role) VALUES
      ('admin@carrepair.com', ?, 'Administrator', '0901234567', 'admin'),
      ('staff1@carrepair.com', ?, 'Nguy·ªÖn VƒÉn Th·ª£', '0901234568', 'staff'),
      ('staff2@carrepair.com', ?, 'Tr·∫ßn VƒÉn S·ª≠a', '0901234569', 'staff'),
      ('customer1@gmail.com', ?, 'L√™ VƒÉn Kh√°ch', '0912345678', 'customer'),
      ('customer2@gmail.com', ?, 'Ph·∫°m Th·ªã H·∫±ng', '0923456789', 'customer')
      ON DUPLICATE KEY UPDATE id=id
    `, [hashedPassword, hashedPassword, hashedPassword, hashedPassword, hashedPassword]);

    // 2. Seed service categories
    await connection.execute(`
      INSERT INTO service_categories (name, slug, description, sort_order) VALUES
      ('S·ª≠a ch·ªØa c∆° b·∫£n', 'sua-chua-co-ban', 'C√°c d·ªãch v·ª• s·ª≠a ch·ªØa v√† b·∫£o d∆∞·ª°ng c∆° b·∫£n', 1),
      ('D·ªãch v·ª• chuy√™n s√¢u', 'dich-vu-chuyen-sau', 'S·ª≠a ch·ªØa chuy√™n s√¢u v√† ƒë·∫°i tu', 2),
      ('D·ªãch v·ª• ƒë·∫∑c bi·ªát', 'dich-vu-dac-biet', 'C·ª©u h·ªô v√† d·ªãch v·ª• ƒë·∫∑c bi·ªát', 3),
      ('B·∫£o d∆∞·ª°ng ƒë·ªãnh k·ª≥', 'bao-duong-dinh-ky', 'C√°c g√≥i b·∫£o d∆∞·ª°ng ƒë·ªãnh k·ª≥', 4)
      ON DUPLICATE KEY UPDATE id=id
    `);

    // 3. Seed services
    await connection.execute(`
      INSERT INTO services (category_id, name, slug, description, short_description, price, duration_minutes, is_featured) VALUES
      -- S·ª≠a ch·ªØa c∆° b·∫£n
      (1, 'Thay nh·ªõt ƒë·ªông c∆°', 'thay-nhot-dong-co', 'Thay nh·ªõt ƒë·ªông c∆° ch√≠nh h√£ng, ki·ªÉm tra v√† v·ªá sinh l·ªçc gi√≥', 'Thay nh·ªõt ch·∫•t l∆∞·ª£ng cao', 120000, 30, true),
      (1, 'Thay l·ªëp xe', 'thay-lop-xe', 'Thay l·ªëp xe c√°c lo·∫°i, c√¢n b·∫±ng ƒë·ªông', 'L·ªëp ch√≠nh h√£ng, ƒëa d·∫°ng size', 250000, 45, true),
      (1, 'S·ª≠a phanh', 'sua-phanh', 'Ki·ªÉm tra v√† s·ª≠a ch·ªØa h·ªá th·ªëng phanh', 'ƒê·∫£m b·∫£o an to√†n khi v·∫≠n h√†nh', 180000, 60, false),
      (1, 'V√° l·ªëp', 'va-lop', 'V√° l·ªëp b·ªã th·ªßng, ki·ªÉm tra √°p su·∫•t', 'V√° nhanh, b·ªÅn ch·∫Øc', 30000, 20, false),
      (1, 'S·∫°c ·∫Øc quy', 'sac-ac-quy', 'S·∫°c v√† ki·ªÉm tra ·∫Øc quy', 'Kh√¥i ph·ª•c ·∫Øc quy nhanh ch√≥ng', 50000, 30, false),

      -- D·ªãch v·ª• chuy√™n s√¢u
      (2, 'ƒê·∫°i tu ƒë·ªông c∆°', 'dai-tu-dong-co', 'ƒê·∫°i tu to√†n b·ªô ƒë·ªông c∆°, thay th·∫ø linh ki·ªán', 'Ph·ª•c h·ªìi ƒë·ªông c∆° nh∆∞ m·ªõi', 3500000, 480, true),
      (2, 'S·ª≠a h·ªôp s·ªë', 'sua-hop-so', 'S·ª≠a ch·ªØa v√† thay th·∫ø h·ªôp s·ªë', 'Kh·∫Øc ph·ª•c c√°c l·ªói h·ªôp s·ªë', 2000000, 360, false),
      (2, 'Thay b·ªô ly h·ª£p', 'thay-bo-ly-hop', 'Thay th·∫ø to√†n b·ªô b·ªô ly h·ª£p', 'Ly h·ª£p m·ªõi, √™m √°i', 1500000, 240, false),
      (2, 'S∆°n xe', 'son-xe', 'S∆°n l·∫°i to√†n b·ªô xe ho·∫∑c t·ª´ng ph·∫ßn', 'S∆°n ƒë·∫πp nh∆∞ m·ªõi', 2500000, 720, false),
      (2, 'ƒê·ªô xe', 'do-xe', 'ƒê·ªô xe theo y√™u c·∫ßu kh√°ch h√†ng', 'N√¢ng c·∫•p hi·ªáu su·∫•t', NULL, 480, false),

      -- D·ªãch v·ª• ƒë·∫∑c bi·ªát
      (3, 'C·ª©u h·ªô 24/7', 'cuu-ho-24-7', 'D·ªãch v·ª• c·ª©u h·ªô xe m√°y kh·∫©n c·∫•p 24/7', 'C√≥ m·∫∑t nhanh ch√≥ng', 200000, 60, true),
      (3, 'S·ª≠a xe t·∫°i nh√†', 'sua-xe-tai-nha', 'ƒê·∫øn t·∫≠n nh√† kh√°ch h√†ng ƒë·ªÉ s·ª≠a xe', 'Ti·ªán l·ª£i, nhanh ch√≥ng', 150000, 90, false),
      (3, 'R·ª≠a xe', 'rua-xe', 'R·ª≠a xe s·∫°ch s·∫Ω, ƒë√°nh b√≥ng', 'Xe s·∫°ch nh∆∞ m·ªõi', 50000, 30, false),
      (3, 'Ki·ªÉm tra xe tr∆∞·ªõc khi mua', 'kiem-tra-xe', 'Ki·ªÉm tra to√†n di·ªán xe c≈© tr∆∞·ªõc khi mua', 'ƒê√°nh gi√° ch√≠nh x√°c', 300000, 120, false),

      -- B·∫£o d∆∞·ª°ng ƒë·ªãnh k·ª≥
      (4, 'B·∫£o d∆∞·ª°ng 1000km', 'bao-duong-1000km', 'G√≥i b·∫£o d∆∞·ª°ng cho xe m·ªõi ch·∫°y 1000km', 'B·∫£o d∆∞·ª°ng c∆° b·∫£n', 250000, 60, false),
      (4, 'B·∫£o d∆∞·ª°ng 5000km', 'bao-duong-5000km', 'G√≥i b·∫£o d∆∞·ª°ng ƒë·ªãnh k·ª≥ 5000km', 'B·∫£o d∆∞·ª°ng to√†n di·ªán', 450000, 90, true),
      (4, 'B·∫£o d∆∞·ª°ng 10000km', 'bao-duong-10000km', 'G√≥i b·∫£o d∆∞·ª°ng ƒë·ªãnh k·ª≥ 10000km', 'Ki·ªÉm tra chi ti·∫øt', 650000, 120, false),
      (4, 'B·∫£o d∆∞·ª°ng tr∆∞·ªõc m√πa m∆∞a', 'bao-duong-mua-mua', 'Ki·ªÉm tra v√† b·∫£o d∆∞·ª°ng xe tr∆∞·ªõc m√πa m∆∞a', 'An to√†n m√πa m∆∞a', 350000, 90, false)
      ON DUPLICATE KEY UPDATE id=id
    `);

    // 4. Seed parts (ph·ª• t√πng)
    await connection.execute(`
      INSERT INTO parts (part_code, name, description, brand, unit, purchase_price, selling_price, quantity_in_stock, min_stock_level) VALUES
      ('PT001', 'Nh·ªõt Castrol Power 1 10W-40', 'Nh·ªõt ƒë·ªông c∆° cao c·∫•p cho xe m√°y', 'Castrol', 'L√≠t', 120000, 180000, 50, 10),
      ('PT002', 'L·ªëp Michelin City Grip', 'L·ªëp xe m√°y ch·ªëng tr∆∞·ª£t', 'Michelin', 'C√°i', 800000, 1200000, 20, 5),
      ('PT003', '·∫Æc quy GS 12V-5Ah', '·∫Æc quy kh√¥ cho xe m√°y', 'GS', 'C√°i', 350000, 500000, 15, 3),
      ('PT004', 'M√° phanh tr∆∞·ªõc', 'M√° phanh ch√≠nh h√£ng', 'Honda', 'B·ªô', 80000, 150000, 30, 10),
      ('PT005', 'M√° phanh sau', 'M√° phanh ch√≠nh h√£ng', 'Honda', 'B·ªô', 60000, 120000, 30, 10),
      ('PT006', 'L·ªçc gi√≥', 'L·ªçc gi√≥ ƒë·ªông c∆°', 'K&N', 'C√°i', 50000, 100000, 40, 10),
      ('PT007', 'Bugi NGK', 'Bugi cao c·∫•p', 'NGK', 'C√°i', 30000, 60000, 100, 20),
      ('PT008', 'D√¢y curoa', 'D√¢y curoa truy·ªÅn ƒë·ªông', 'Gates', 'C√°i', 150000, 250000, 25, 5),
      ('PT009', 'Nh√¥ng x√≠ch dƒ©a', 'B·ªô nh√¥ng x√≠ch dƒ©a', 'DID', 'B·ªô', 250000, 400000, 20, 5),
      ('PT010', 'B√≥ng ƒë√®n pha LED', 'B√≥ng ƒë√®n pha LED si√™u s√°ng', 'Philips', 'C√°i', 180000, 300000, 30, 10),
      ('PT011', 'Phu·ªôc tr∆∞·ªõc', 'Phu·ªôc tr∆∞·ªõc ch√≠nh h√£ng', 'Yamaha', 'C√°i', 800000, 1200000, 10, 3),
      ('PT012', 'Phu·ªôc sau', 'Phu·ªôc sau ch√≠nh h√£ng', 'Yamaha', 'C√°i', 600000, 900000, 10, 3),
      ('PT013', 'G∆∞∆°ng chi·∫øu h·∫≠u', 'G∆∞∆°ng chi·∫øu h·∫≠u ch√≠nh h√£ng', 'Honda', 'C√°i', 120000, 200000, 20, 5),
      ('PT014', 'Tay th·∫Øng', 'Tay th·∫Øng nh√¥m CNC', 'Rizoma', 'B·ªô', 300000, 500000, 15, 3),
      ('PT015', '·ªêc titan', 'B·ªô ·ªëc titan si√™u nh·∫π', 'ProBolt', 'B·ªô', 500000, 800000, 10, 2)
      ON DUPLICATE KEY UPDATE id=id
    `);

    // 5. Seed customers
    const [userRows]: any = await connection.execute(
      `SELECT id FROM users WHERE email IN ('customer1@gmail.com', 'customer2@gmail.com')`
    );

    if (userRows.length >= 2) {
      await connection.execute(`
        INSERT INTO customers (user_id, customer_code, address, date_of_birth, gender, loyalty_points) VALUES
        (?, 'KH001', '123 Nguy·ªÖn VƒÉn Linh, Q7, TP.HCM', '1990-05-15', 'male', 150),
        (?, 'KH002', '456 L√™ VƒÉn Vi·ªát, Q9, TP.HCM', '1985-10-20', 'female', 200)
        ON DUPLICATE KEY UPDATE id=id
      `, [userRows[0].id, userRows[1].id]);

      // 6. Seed vehicles
      const [customerRows]: any = await connection.execute(
        `SELECT id FROM customers WHERE customer_code IN ('KH001', 'KH002')`
      );

      if (customerRows.length >= 2) {
        await connection.execute(`
          INSERT INTO vehicles (customer_id, license_plate, brand, model, year, color, mileage) VALUES
          (?, '59A-12345', 'Honda', 'Air Blade 150', 2022, 'ƒêen', 5000),
          (?, '59B-67890', 'Yamaha', 'Exciter 155', 2021, 'Xanh d∆∞∆°ng', 8000),
          (?, '59C-11111', 'Honda', 'Wave Alpha 110', 2020, 'Tr·∫Øng', 12000)
          ON DUPLICATE KEY UPDATE id=id
        `, [customerRows[0].id, customerRows[1].id, customerRows[0].id]);
      }
    }

    // 7. Seed promotions
    await connection.execute(`
      INSERT INTO promotions (code, name, description, discount_type, discount_value, min_purchase_amount, start_date, end_date, usage_limit) VALUES
      ('WELCOME10', 'Gi·∫£m 10% cho kh√°ch m·ªõi', '√Åp d·ª•ng cho kh√°ch h√†ng l·∫ßn ƒë·∫ßu s·ª≠ d·ª•ng d·ªãch v·ª•', 'percentage', 10, 200000, CURDATE(), DATE_ADD(CURDATE(), INTERVAL 30 DAY), 100),
      ('SUMMER2024', 'Khuy·∫øn m√£i m√πa h√®', 'Gi·∫£m 15% cho t·∫•t c·∫£ d·ªãch v·ª• b·∫£o d∆∞·ª°ng', 'percentage', 15, 500000, CURDATE(), DATE_ADD(CURDATE(), INTERVAL 60 DAY), 50),
      ('LOYALTY100K', '∆Øu ƒë√£i kh√°ch th√¢n thi·∫øt', 'Gi·∫£m 100.000ƒë cho h√≥a ƒë∆°n t·ª´ 1 tri·ªáu', 'fixed', 100000, 1000000, CURDATE(), DATE_ADD(CURDATE(), INTERVAL 90 DAY), 200)
      ON DUPLICATE KEY UPDATE id=id
    `);

    // 8. Seed settings
    await connection.execute(`
      INSERT INTO settings (setting_key, setting_value, setting_type, description) VALUES
      ('shop_name', 'Ti·ªám S·ª≠a Xe M√°y Pro', 'text', 'T√™n ti·ªám'),
      ('shop_address', '123 ƒê∆∞·ªùng Nguy·ªÖn VƒÉn Linh, Qu·∫≠n 7, TP.HCM', 'text', 'ƒê·ªãa ch·ªâ ti·ªám'),
      ('shop_phone', '0901234567', 'text', 'S·ªë ƒëi·ªán tho·∫°i'),
      ('shop_email', 'contact@carrepair.com', 'email', 'Email li√™n h·ªá'),
      ('working_hours', '{"mon-fri": "8:00-18:00", "sat": "8:00-17:00", "sun": "closed"}', 'json', 'Gi·ªù l√†m vi·ªác'),
      ('loyalty_points_rate', '0.01', 'number', 'T·ª∑ l·ªá t√≠ch ƒëi·ªÉm (1% c·ªßa h√≥a ƒë∆°n)'),
      ('tax_rate', '10', 'number', 'Thu·∫ø VAT (%)'),
      ('booking_time_slot', '30', 'number', 'Kho·∫£ng th·ªùi gian m·ªói slot booking (ph√∫t)'),
      ('max_bookings_per_slot', '3', 'number', 'S·ªë l∆∞·ª£ng booking t·ªëi ƒëa m·ªói slot'),
      ('reminder_hours_before', '24', 'number', 'Nh·∫Øc nh·ªü tr∆∞·ªõc gi·ªù h·∫πn (gi·ªù)'),
      ('cancellation_hours', '6', 'number', 'Th·ªùi gian t·ªëi thi·ªÉu ƒë·ªÉ h·ªßy l·ªãch (gi·ªù)'),
      ('facebook_url', 'https://facebook.com/carrepairshop', 'url', 'Link Facebook'),
      ('google_maps_api_key', 'YOUR_GOOGLE_MAPS_API_KEY', 'text', 'Google Maps API Key'),
      ('sms_provider', 'twilio', 'text', 'SMS Provider'),
      ('email_provider', 'smtp', 'text', 'Email Provider')
      ON DUPLICATE KEY UPDATE id=id
    `);

    console.log('‚úÖ Database seeded successfully');
  } catch (error) {
    console.error('‚ùå Seeding failed:', error);
    throw error;
  } finally {
    connection.release();
  }
};

export const unseed = async (pool: Pool): Promise<void> => {
  const connection = await pool.getConnection();

  try {
    // Clear data in reverse order of foreign key dependencies
    await connection.execute('DELETE FROM settings');
    await connection.execute('DELETE FROM notifications');
    await connection.execute('DELETE FROM loyalty_transactions');
    await connection.execute('DELETE FROM promotions');
    await connection.execute('DELETE FROM reviews');
    await connection.execute('DELETE FROM invoices');
    await connection.execute('DELETE FROM repair_parts');
    await connection.execute('DELETE FROM repair_services');
    await connection.execute('DELETE FROM repairs');
    await connection.execute('DELETE FROM appointments');
    await connection.execute('DELETE FROM vehicles');
    await connection.execute('DELETE FROM parts');
    await connection.execute('DELETE FROM services');
    await connection.execute('DELETE FROM service_categories');
    await connection.execute('DELETE FROM customers');
    await connection.execute('DELETE FROM users');

    console.log('‚úÖ Database unseeded successfully');
  } finally {
    connection.release();
  }
};